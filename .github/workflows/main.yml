name: Java CI with Maven and Docker

# Define the events that trigger the workflow
on:
  # Trigger the workflow on push events to the master branch
  push:
    branches: [ "master" ]
  # Allow the workflow to be manually triggered from the GitHub Actions UI
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - uses: actions/checkout@v3

    # Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # Get the current version from the pom.xml file and set it as an environment variable
    - name: Get Current Version
      id: get_version
      run: |
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -f myapp/pom.xml)
        echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV

    # Increase Patch Version of the JAR
    - name: Increase Patch Version
      id: bump_version
      run: |
        CURRENT_VERSION=${{ env.CURRENT_VERSION }}
        BASE_VERSION=$(echo $CURRENT_VERSION | cut -d. -f1,2)
        PATCH_VERSION=$(echo $CURRENT_VERSION | cut -d. -f3)
        NEW_PATCH_VERSION=$((PATCH_VERSION + 1))
        NEW_VERSION="${BASE_VERSION}.${NEW_PATCH_VERSION}"
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
        mvn -B versions:set -DnewVersion=${NEW_VERSION} --file myapp/pom.xml

    # Compile the code and package it into a JAR file
    - name: Compile and Package
      run: mvn clean package --file myapp/pom.xml
      env:
        MAVEN_OPTS: -Dmaven.repo.local=./.m2/repository

    # Upload the packaged JAR file as an artifact
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: myapp
        path: myapp/target/*.jar

    # Login to Docker Hub using credentials stored in GitHub secrets
    # Make sure you have your secrets set here:
    # https://github.com/{github_account}/{project_name}/settings/secrets/actions
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: "${{ secrets.DOCKERHUB_USERNAME }}"
        password: "${{ secrets.DOCKERHUB_PASSWORD }}"

    # Build a Docker image and tag it with the new version
    - name: Build Docker image
      run: |
        docker buildx build . --file Dockerfile --tag "${{ secrets.DOCKER_REPOSITORY }}:$NEW_VERSION"
      env:
        DOCKER_BUILDKIT: 1

    # Push the Docker image to Docker Hub
    - name: Push Docker image
      run: docker push "${{ secrets.DOCKER_REPOSITORY }}:$NEW_VERSION"

    # Download and run Docker image
    - name: Download and run Docker image
      run: |
        docker pull "${{ secrets.DOCKER_REPOSITORY }}:$NEW_VERSION"
        docker run -d "${{ secrets.DOCKER_REPOSITORY }}:$NEW_VERSION"

#############################################################################################

    # Set up k3s (Lightweight Kubernetes)
    - name: Set up k3s
      run: |
        curl -sfL https://get.k3s.io | sh -
        sudo k3s kubectl get nodes

    # Deploy the application to k3s
    - name: Deploy to k3s
      run: |
        cat <<EOF | sudo k3s kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: hello-world
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: hello-world
          template:
            metadata:
              labels:
                app: hello-world
            spec:
              containers:
              - name: hello-world
                image: ${{ secrets.DOCKER_REPOSITORY }}:$NEW_VERSION
                ports:
                - containerPort: 8080
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: hello-world
        spec:
          selector:
            app: hello-world
          ports:
          - port: 8080
            targetPort: 8080
          type: NodePort
        EOF
        
        sudo k3s kubectl rollout status deployment/hello-world

    # Debugging step: Check the deployment status
    - name: Get deployment status
      run: sudo k3s kubectl describe deployment hello-world

    # Debugging step: Get logs from the pod
    - name: Get pod logs
      run: |
        POD_NAME=$(sudo k3s kubectl get pods -l app=hello-world -o jsonpath="{.items[0].metadata.name}")
        sudo k3s kubectl logs $POD_NAME
        
